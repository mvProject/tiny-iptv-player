CREATE TABLE PlaylistChannelEntity (
    id INTEGER NOT NULL,
    channelName TEXT NOT NULL,
    channelLogo TEXT NOT NULL,
    channelUrl TEXT NOT NULL,
    channelGroup TEXT NOT NULL,
    epgId INTEGER,
    epgAlterId INTEGER,
    parentListId INTEGER NOT NULL,

    CONSTRAINT PK_ChannelEntity PRIMARY KEY (channelName,channelUrl,parentListId)
);

CREATE INDEX PlaylistChannelEntity_parentListId ON PlaylistChannelEntity(parentListId);
CREATE INDEX PlaylistChannelEntity_channelGroup ON PlaylistChannelEntity(channelGroup);
CREATE INDEX PlaylistChannelEntity_id ON PlaylistChannelEntity(id);

CREATE TABLE FavoriteChannelEntity (
    id INTEGER NOT NULL,
    channelId INTEGER NOT NULL,
    channelName TEXT NOT NULL,
    channelOrder INTEGER NOT NULL,
    parentListId INTEGER NOT NULL,

    CONSTRAINT PK_FavoriteChannelEntity PRIMARY KEY (channelName,channelId,parentListId)
);

CREATE INDEX FavoriteChannelEntity_channelId ON FavoriteChannelEntity(channelId);
CREATE INDEX FavoriteChannelEntity_parentListId ON FavoriteChannelEntity(parentListId);

getChannelEntityById:
SELECT *
FROM PlaylistChannelEntity
WHERE id = :id;

getAllChannelEntitiesByListId:
SELECT *
FROM PlaylistChannelEntity
WHERE parentListId = :id
ORDER BY channelName;

getAllChannelGroupsByListId:
SELECT channelGroup
FROM PlaylistChannelEntity
WHERE parentListId = :id;

getAllChannelCountByListId:
SELECT COUNT(*)
FROM PlaylistChannelEntity
WHERE parentListId = :id;

getGroupedChannelEntitiesByListId:
SELECT *
FROM PlaylistChannelEntity
WHERE parentListId = :id AND channelGroup = :group
ORDER BY channelName;

getChannelsEntitiesByIds:
SELECT *
FROM PlaylistChannelEntity
WHERE parentListId = :id AND id IN :ids
ORDER BY channelName;

getGroupedChannelCountByListId:
SELECT
channelGroup,
COUNT(*)
FROM PlaylistChannelEntity
WHERE parentListId = :id AND channelGroup = :group;

insertChannelEntity:
INSERT OR REPLACE
INTO PlaylistChannelEntity
VALUES ?;

deleteChannelEntityByListId:
DELETE FROM PlaylistChannelEntity
WHERE parentListId = :id;

insertFavoriteChannelEntity:
INSERT OR REPLACE
INTO FavoriteChannelEntity
VALUES ?;

getFavoriteChannelsByListId:
SELECT channelId
FROM FavoriteChannelEntity
WHERE parentListId = :id;

getFavoriteChannelsNames:
SELECT channelName
FROM FavoriteChannelEntity
WHERE parentListId = :id;

getFavoriteChannels:
SELECT *
FROM FavoriteChannelEntity
WHERE parentListId = :id;

deleteFavoriteChannelByChannelId:
DELETE FROM FavoriteChannelEntity
WHERE parentListId = :id AND channelId = :channelId;


deleteFavoriteChannels:
DELETE FROM FavoriteChannelEntity
WHERE parentListId = :id;

getChannelsWithMainInfo:
SELECT
PlaylistChannelEntity.id AS channelId,
PlaylistChannelEntity.channelName,
PlaylistChannelEntity.channelUrl,
PlaylistChannelEntity.channelGroup,
PlaylistChannelEntity.parentListId,
ChannelInfoMainEntity.channelInfoLogo,
ChannelInfoMainEntity.channelInfoId
FROM PlaylistChannelEntity
INNER JOIN ChannelInfoMainEntity ON (ChannelInfoMainEntity.channelInfoName = PlaylistChannelEntity.channelName)
WHERE parentListId = :id;

getChannelsWithAlterInfo:
SELECT
PlaylistChannelEntity.id AS channelId,
PlaylistChannelEntity.channelName,
PlaylistChannelEntity.channelUrl,
PlaylistChannelEntity.channelGroup,
PlaylistChannelEntity.parentListId,
ChannelInfoAlterEntity.channelInfoLogo,
ChannelInfoAlterEntity.channelInfoId
FROM PlaylistChannelEntity
INNER JOIN ChannelInfoAlterEntity ON (ChannelInfoAlterEntity.channelInfoName = PlaylistChannelEntity.channelName)
WHERE parentListId = :id;